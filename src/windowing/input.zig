const glfw = @cImport({
    @cInclude("GLFW/glfw3.h");
});

pub const Key = enum {
    ESCAPE,
    TAB,
    BACKTAB,
    BACKSPACE,
    RETURN,
    ENTER,
    INSERT,
    DELETE,
    PAUSE,
    PRINT,
    SYS_REQ,
    CLEAR,
    HOME,
    END,
    LEFT,
    UP,
    RIGHT,
    DOWN,
    PAGE_UP,
    PAGE_DOWN,
    SHIFT,
    CTRL,
    META,
    ALT,
    ALT_GR,
    CAPS_LOCK,
    NUM_LOCK,
    SCROLL_LOCK,
    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10,
    F11,
    F12,
    F13,
    F14,
    F15,
    F16,
    F17,
    F18,
    F19,
    F20,
    F21,
    F22,
    F23,
    F24,
    F25,
    F26,
    F27,
    F28,
    F29,
    F30,
    F31,
    F32,
    F33,
    F34,
    F35,
    SUPER_L,
    SUPER_R,
    MENU,
    HYPER_L,
    HYPER_R,
    HELP,
    DIRECTION_L,
    DIRECTION_R,
    SPACE,
    ANY,
    EXCLAM,
    QUOTE_DBL,
    NUMBER_SIGN,
    DOLLAR,
    PERCENT,
    AMPERSAND,
    APOSTROPHE,
    PAREN_LEFT,
    PAREN_RIGHT,
    ASTERISK,
    PLUS,
    COMMA,
    MINUS,
    PERIOD,
    SLASH,
    NUM0,
    NUM1,
    NUM2,
    NUM3,
    NUM4,
    NUM5,
    NUM6,
    NUM7,
    NUM8,
    NUM9,
    COLON,
    SEMICOLON,
    LESS,
    EQUAL,
    GREATER,
    QUESTION,
    AT,
    A,
    B,
    C,
    D,
    E,
    F,
    G,
    H,
    I,
    J,
    K,
    L,
    M,
    N,
    O,
    P,
    Q,
    R,
    S,
    T,
    U,
    V,
    W,
    X,
    Y,
    Z,
    BRACKET_LEFT,
    BACKSLASH,
    BRACKET_RIGHT,
    ASCII_CIRCUM,
    UNDERSCORE,
    QUOTE_LEFT,
    BRACE_LEFT,
    BAR,
    BRACE_RIGHT,
    ASCII_TILDE,
    NOBREAKSPACE,
    EXCLAMDOWN,
    CENT,
    STERLING,
    CURRECNY,
    YEN,
    BROKENBAR,
    SECTION,
    DIAERESIS,
    COPYRIGHT,
    ORDFEMININE,
    GUILLEMOTLEFT,
    NOTSIGN,
    HYPHEN,
    REGISTERED,
    MACRON,
    DEGREE,
    PLUSMINUS,
    TWOSUPERIOR,
    THREESUPERIOR,
    ACUTE,
    MICRO,
    MU,
    PARAGRAPH,
    PERIODCENTERED,
    CEDILLA,
    ONESUPERIOR,
    MASCULINE,
    GUILLEMOTRIGHT,
    ONEQUARTER,
    ONEHALF,
    THREEQUARTERS,
    QUESTIONDOWN,
    A_GRAVE,
    A_ACUTE,
    A_CIRCUMFLEX,
    A_TILDE,
    A_DIAERESIS,
    A_RING,
    A_E,
    C_CEDILLA,
    E_GRACE,
    E_ACUTE,
    E_CURCUMFLEX,
    E_DIAERESIS,
    I_GRAVE,
    I_ACUTE,
    I_CIRCUMFLEX,
    I_DIAERESIS,
    ETH,
    N_TILDE,
    O_GRAVE,
    O_ACUTE,
    O_CIRCUMFLEX,
    O_TILDE,
    O_DIAERESIS,
    MULTIPLY,
    O_OBLIQUE,
    U_GRAVE,
    U_ACUTE,
    U_CIRCUMFLEX,
    U_DIAERESIS,
    Y_ACUTE,
    THORN,
    SSHARP,
    DIVISION,
    Y_DIAERESIS,
    MULTI_KEY,
    CODEINPUT,
    SINGLE_CANDIDATE,
    MULTIPLE_CANDIDATE,
    PREVIOUS_CANDIDATE,
    MODE_SWITCH,
    KANJI,
    MUHENKAN,
    HENKAN,
    ROMAJI,
    HIRAGANA,
    KATAKANA,
    HIRAGAN_KATAKANA,
    ZENKAKU,
    HANKAKU,
    ZENKAKU_HANKAKU,
    TOUROKU,
    MASSYO,
    KANA_LOCK,
    KANA_SHIFT,
    EISU_SHIFT,
    EISU_TOGGLE,
    HANGUL,
    HANGUL_START,
    HANGUL_END,
    HANGUL_HANJA,
    HANGUL_JAMO,
    HANGUL_ROMAJA,
    HANGUL_JEONJA,
    HANGUL_BANJA,
    HANGUL_PRE_HANJA,
    HANGUL_POST_HANJA,
    HANGUL_SPECIAL,
    DEAD_GRAVE,
    DEAD_ACUTE,
    DEAD_CIRCUMFLEX,
    DEAD_TILDE,
    DEAD_MACRON,
    DEAD_BREVE,
    DEAD_ABOVEDOT,
    DEAD_DIAERESIS,
    DEAD_ABOVERING,
    DEAD_DOUBLEACUTE,
    DEAD_CARON,
    DEAD_CEDILLA,
    DEAD_OGONEK,
    DEAD_IOTA,
    DEAD_VOICED_SOUND,
    DEAD_SEMIVOICED_SOUND,
    DEAD_BELOWDOT,
    DEAD_HOOK,
    DEAD_HORN,
    DEAD_STROKE,
    DEAD_ABOVECOMMA,
    DEAD_ABOVEREVERSEDCOMMA,
    DEAD_DOUBLEGRAVE,
    BACK,
    FORWARD,
    STOP,
    REFRESH,
    VOLUME_DOWN,
    VOLUME_MUTE,
    VOLUME_UP,
    BASS_BOOST,
    BASS_UP,
    BASS_DOWN,
    TREBLE_UP,
    TREBLE_DOWN,
    MEDIA_PLAY,
    MEDIA_STOP,
    MEDIA_PREVIOUS,
    MEDIA_NEXT,
    MEDIA_RECORD,
    MEDIA_PAUSE,
    MEDIA_TOGGLE_PLAY_PAUSE,
    HOME_PAGE,
    FAVORITES,
    SEARCH,
    STANDBY,
    OPEN_URL,
    MON_BRIGHTNESS_UP,
    MON_BRIGHTNESS_DOWN,
    KEYBOARD_LIGHT_ON_OFF,
    KEYBOARD_BRIGHTNESS_UP,
    KEYBOARD_BRIGHTNESS_DOWN,
    POWER_OFF,
    WAKE_UP,
    EJECT,
    SCREEN_SAVE,
};

pub const KeyModifier = struct {
    shift: bool,
    ctrl: bool,
    alt: bool,
    super: bool,
    keypad: bool,
    groupSwitch: bool,
};

pub const KeyAction = enum {
    PRESSED,
    RELEASED,
    REPEAT,
};

pub fn convertBackendKeyToKey(backendKey: c_int) Key {
    // TODO: some of these keys are not properly mapped
    return switch (backendKey) {
        glfw.GLFW_KEY_ESCAPE => Key.ESCAPE,
        glfw.GLFW_KEY_TAB => Key.TAB,
        // glfw.GLFW_KEY_TAB => Key.BACKTAB,
        glfw.GLFW_KEY_BACKSPACE => Key.BACKSPACE,
        // glfw.GLFW_KEY_ENTER => Key.RETURN,
        glfw.GLFW_KEY_ENTER => Key.ENTER,
        glfw.GLFW_KEY_INSERT => Key.INSERT,
        glfw.GLFW_KEY_DELETE => Key.DELETE,
        glfw.GLFW_KEY_PAUSE => Key.PAUSE,
        glfw.GLFW_KEY_PRINT_SCREEN => Key.PRINT,
        // glfw.GLFW_KEY_LEFT_SUPER => Key.SYS_REQ,
        // glfw.GLFW_KEY_BACKSPACE => Key.CLEAR,
        glfw.GLFW_KEY_HOME => Key.HOME,
        glfw.GLFW_KEY_END => Key.END,
        glfw.GLFW_KEY_LEFT => Key.LEFT,
        glfw.GLFW_KEY_UP => Key.UP,
        glfw.GLFW_KEY_RIGHT => Key.RIGHT,
        glfw.GLFW_KEY_DOWN => Key.DOWN,
        glfw.GLFW_KEY_PAGE_UP => Key.PAGE_UP,
        glfw.GLFW_KEY_PAGE_DOWN => Key.PAGE_DOWN,
        glfw.GLFW_KEY_LEFT_SHIFT => Key.SHIFT,
        glfw.GLFW_KEY_LEFT_CONTROL => Key.CTRL,
        // glfw.GLFW_KEY_LEFT_SUPER => Key.META,
        glfw.GLFW_KEY_LEFT_ALT => Key.ALT,
        // glfw.GLFW_KEY_GRAVE_ACCENT => Key.ALT_GR,
        glfw.GLFW_KEY_CAPS_LOCK => Key.CAPS_LOCK,
        glfw.GLFW_KEY_NUM_LOCK => Key.NUM_LOCK,
        glfw.GLFW_KEY_SCROLL_LOCK => Key.SCROLL_LOCK,
        glfw.GLFW_KEY_F1 => Key.F1,
        glfw.GLFW_KEY_F2 => Key.F2,
        glfw.GLFW_KEY_F3 => Key.F3,
        glfw.GLFW_KEY_F4 => Key.F4,
        glfw.GLFW_KEY_F5 => Key.F5,
        glfw.GLFW_KEY_F6 => Key.F6,
        glfw.GLFW_KEY_F7 => Key.F7,
        glfw.GLFW_KEY_F8 => Key.F8,
        glfw.GLFW_KEY_F9 => Key.F9,
        glfw.GLFW_KEY_F10 => Key.F10,
        glfw.GLFW_KEY_F11 => Key.F11,
        glfw.GLFW_KEY_F12 => Key.F12,
        glfw.GLFW_KEY_F13 => Key.F13,
        glfw.GLFW_KEY_F14 => Key.F14,
        glfw.GLFW_KEY_F15 => Key.F15,
        glfw.GLFW_KEY_F16 => Key.F16,
        glfw.GLFW_KEY_F17 => Key.F17,
        glfw.GLFW_KEY_F18 => Key.F18,
        glfw.GLFW_KEY_F19 => Key.F19,
        glfw.GLFW_KEY_F20 => Key.F20,
        glfw.GLFW_KEY_F21 => Key.F21,
        glfw.GLFW_KEY_F22 => Key.F22,
        glfw.GLFW_KEY_F23 => Key.F23,
        glfw.GLFW_KEY_F24 => Key.F24,
        glfw.GLFW_KEY_F25 => Key.F25,
        // glfw.GLFW_KEY_F26 => Key.F26,
        // glfw.GLFW_KEY_F27 => Key.F27,
        // glfw.GLFW_KEY_F28 => Key.F28,
        // glfw.GLFW_KEY_F29 => Key.F29,
        // glfw.GLFW_KEY_F30 => Key.F30,
        // glfw.GLFW_KEY_F31 => Key.F31,
        // glfw.GLFW_KEY_F32 => Key.F32,
        // glfw.GLFW_KEY_F33 => Key.F33,
        // glfw.GLFW_KEY_F34 => Key.F34,
        // glfw.GLFW_KEY_F35 => Key.F35,
        glfw.GLFW_KEY_LEFT_SUPER => Key.SUPER_L,
        glfw.GLFW_KEY_RIGHT_SUPER => Key.SUPER_R,
        glfw.GLFW_KEY_MENU => Key.MENU,
        // glfw.GLFW_KEY_LEFT_SHIFT => Key.HYPER_L,
        // glfw.GLFW_KEY_RIGHT_SHIFT => Key.HYPER_R,
        // glfw.GLFW_KEY_LEFT => Key.DIRECTION_L,
        // glfw.GLFW_KEY_RIGHT => Key.DIRECTION_R,
        glfw.GLFW_KEY_SPACE => Key.SPACE,
        // glfw.GLFW_KEY_1 => Key.EXCLAM,
        // glfw.GLFW_KEY_APOSTROPHE => Key.QUOTE_DBL,
        // glfw.GLFW_KEY_3 => Key.NUMBER_SIGN,
        // glfw.GLFW_KEY_4 => Key.DOLLAR,
        // glfw.GLFW_KEY_5 => Key.PERCENT,
        // glfw.GLFW_KEY_7 => Key.AMPERSAND,
        glfw.GLFW_KEY_APOSTROPHE => Key.APOSTROPHE,
        // glfw.GLFW_KEY_9 => Key.PAREN_LEFT,
        // glfw.GLFW_KEY_0 => Key.PAREN_RIGHT,
        // glfw.GLFW_KEY_8 => Key.ASTERISK,
        // glfw.GLFW_KEY_EQUAL => Key.PLUS,
        glfw.GLFW_KEY_COMMA => Key.COMMA,
        glfw.GLFW_KEY_MINUS => Key.MINUS,
        glfw.GLFW_KEY_PERIOD => Key.PERIOD,
        glfw.GLFW_KEY_SLASH => Key.SLASH,
        glfw.GLFW_KEY_0 => Key.NUM0,
        glfw.GLFW_KEY_1 => Key.NUM1,
        glfw.GLFW_KEY_2 => Key.NUM2,
        glfw.GLFW_KEY_3 => Key.NUM3,
        glfw.GLFW_KEY_4 => Key.NUM4,
        glfw.GLFW_KEY_5 => Key.NUM5,
        glfw.GLFW_KEY_6 => Key.NUM6,
        glfw.GLFW_KEY_7 => Key.NUM7,
        glfw.GLFW_KEY_8 => Key.NUM8,
        glfw.GLFW_KEY_9 => Key.NUM9,
        // glfw.GLFW_KEY_SEMICOLON => Key.COLON,
        glfw.GLFW_KEY_SEMICOLON => Key.SEMICOLON,
        // glfw.GLFW_KEY_COMMA => Key.LESS,
        glfw.GLFW_KEY_EQUAL => Key.EQUAL,
        // glfw.GLFW_KEY_PERIOD => Key.GREATER,
        // glfw.GLFW_KEY_SLASH => Key.QUESTION,
        // glfw.GLFW_KEY_2 => Key.AT,
        glfw.GLFW_KEY_A => Key.A,
        glfw.GLFW_KEY_B => Key.B,
        glfw.GLFW_KEY_C => Key.C,
        glfw.GLFW_KEY_D => Key.D,
        glfw.GLFW_KEY_E => Key.E,
        glfw.GLFW_KEY_F => Key.F,
        glfw.GLFW_KEY_G => Key.G,
        glfw.GLFW_KEY_H => Key.H,
        glfw.GLFW_KEY_I => Key.I,
        glfw.GLFW_KEY_J => Key.J,
        glfw.GLFW_KEY_K => Key.K,
        glfw.GLFW_KEY_L => Key.L,
        glfw.GLFW_KEY_M => Key.M,
        glfw.GLFW_KEY_N => Key.N,
        glfw.GLFW_KEY_O => Key.O,
        glfw.GLFW_KEY_P => Key.P,
        glfw.GLFW_KEY_Q => Key.Q,
        glfw.GLFW_KEY_R => Key.R,
        glfw.GLFW_KEY_S => Key.S,
        glfw.GLFW_KEY_T => Key.T,
        glfw.GLFW_KEY_U => Key.U,
        glfw.GLFW_KEY_V => Key.V,
        glfw.GLFW_KEY_W => Key.W,
        glfw.GLFW_KEY_X => Key.X,
        glfw.GLFW_KEY_Y => Key.Y,
        glfw.GLFW_KEY_Z => Key.Z,
        glfw.GLFW_KEY_LEFT_BRACKET => Key.BRACKET_LEFT,
        glfw.GLFW_KEY_BACKSLASH => Key.BACKSLASH,
        glfw.GLFW_KEY_RIGHT_BRACKET => Key.BRACKET_RIGHT,
        // glfw.GLFW_KEY_MENU => Key.ASCII_CIRCUM,
        // glfw.GLFW_KEY_MINUS => Key.UNDERSCORE,
        // glfw.GLFW_KEY_ESCAPE => Key.QUOTE_LEFT,
        // glfw.GLFW_KEY_ESCAPE => Key.BRACE_LEFT,
        // glfw.GLFW_KEY_ESCAPE => Key.BAR,
        // glfw.GLFW_KEY_ESCAPE => Key.BRACE_RIGHT,
        // glfw.GLFW_KEY_ESCAPE => Key.ASCII_TILDE,
        // glfw.GLFW_KEY_ESCAPE => Key.NOBREAKSPACE,
        // glfw.GLFW_KEY_ESCAPE => Key.EXCLAMDOWN,
        // glfw.GLFW_KEY_ESCAPE => Key.CENT,
        // glfw.GLFW_KEY_ESCAPE => Key.STERLING,
        // glfw.GLFW_KEY_ESCAPE => Key.CURRECNY,
        // glfw.GLFW_KEY_ESCAPE => Key.YEN,
        // glfw.GLFW_KEY_ESCAPE => Key.BROKENBAR,
        // glfw.GLFW_KEY_ESCAPE => Key.SECTION,
        // glfw.GLFW_KEY_ESCAPE => Key.DIAERESIS,
        // glfw.GLFW_KEY_ESCAPE => Key.COPYRIGHT,
        // glfw.GLFW_KEY_ESCAPE => Key.ORDFEMININE,
        // glfw.GLFW_KEY_ESCAPE => Key.GUILLEMOTLEFT,
        // glfw.GLFW_KEY_ESCAPE => Key.NOTSIGN,
        // glfw.GLFW_KEY_ESCAPE => Key.HYPHEN,
        // glfw.GLFW_KEY_ESCAPE => Key.REGISTERED,
        // glfw.GLFW_KEY_ESCAPE => Key.MACRON,
        // glfw.GLFW_KEY_ESCAPE => Key.DEGREE,
        // glfw.GLFW_KEY_ESCAPE => Key.PLUSMINUS,
        // glfw.GLFW_KEY_ESCAPE => Key.TWOSUPERIOR,
        // glfw.GLFW_KEY_ESCAPE => Key.THREESUPERIOR,
        // glfw.GLFW_KEY_ESCAPE => Key.ACUTE,
        // glfw.GLFW_KEY_ESCAPE => Key.MICRO,
        // glfw.GLFW_KEY_ESCAPE => Key.MU,
        // glfw.GLFW_KEY_ESCAPE => Key.PARAGRAPH,
        // glfw.GLFW_KEY_ESCAPE => Key.PERIODCENTERED,
        // glfw.GLFW_KEY_ESCAPE => Key.CEDILLA,
        // glfw.GLFW_KEY_ESCAPE => Key.ONESUPERIOR,
        // glfw.GLFW_KEY_ESCAPE => Key.MASCULINE,
        // glfw.GLFW_KEY_ESCAPE => Key.GUILLEMOTRIGHT,
        // glfw.GLFW_KEY_ESCAPE => Key.ONEQUARTER,
        // glfw.GLFW_KEY_ESCAPE => Key.ONEHALF,
        // glfw.GLFW_KEY_ESCAPE => Key.THREEQUARTERS,
        // glfw.GLFW_KEY_ESCAPE => Key.QUESTIONDOWN,
        // glfw.GLFW_KEY_ESCAPE => Key.A_GRAVE,
        // glfw.GLFW_KEY_ESCAPE => Key.A_ACUTE,
        // glfw.GLFW_KEY_ESCAPE => Key.A_CIRCUMFLEX,
        // glfw.GLFW_KEY_ESCAPE => Key.A_TILDE,
        // glfw.GLFW_KEY_ESCAPE => Key.A_DIAERESIS,
        // glfw.GLFW_KEY_ESCAPE => Key.A_RING,
        // glfw.GLFW_KEY_ESCAPE => Key.A_E,
        // glfw.GLFW_KEY_ESCAPE => Key.C_CEDILLA,
        // glfw.GLFW_KEY_ESCAPE => Key.E_GRACE,
        // glfw.GLFW_KEY_ESCAPE => Key.E_ACUTE,
        // glfw.GLFW_KEY_ESCAPE => Key.E_CURCUMFLEX,
        // glfw.GLFW_KEY_ESCAPE => Key.E_DIAERESIS,
        // glfw.GLFW_KEY_ESCAPE => Key.I_GRAVE,
        // glfw.GLFW_KEY_ESCAPE => Key.I_ACUTE,
        // glfw.GLFW_KEY_ESCAPE => Key.I_CIRCUMFLEX,
        // glfw.GLFW_KEY_ESCAPE => Key.I_DIAERESIS,
        // glfw.GLFW_KEY_ESCAPE => Key.ETH,
        // glfw.GLFW_KEY_ESCAPE => Key.N_TILDE,
        // glfw.GLFW_KEY_ESCAPE => Key.O_GRAVE,
        // glfw.GLFW_KEY_ESCAPE => Key.O_ACUTE,
        // glfw.GLFW_KEY_ESCAPE => Key.O_CIRCUMFLEX,
        // glfw.GLFW_KEY_ESCAPE => Key.O_TILDE,
        // glfw.GLFW_KEY_ESCAPE => Key.O_DIAERESIS,
        glfw.GLFW_KEY_KP_MULTIPLY => Key.MULTIPLY,
        // glfw.GLFW_KEY_ESCAPE => Key.O_OBLIQUE,
        // glfw.GLFW_KEY_ESCAPE => Key.U_GRAVE,
        // glfw.GLFW_KEY_ESCAPE => Key.U_ACUTE,
        // glfw.GLFW_KEY_ESCAPE => Key.U_CIRCUMFLEX,
        // glfw.GLFW_KEY_ESCAPE => Key.U_DIAERESIS,
        // glfw.GLFW_KEY_ESCAPE => Key.Y_ACUTE,
        // glfw.GLFW_KEY_ESCAPE => Key.THORN,
        // glfw.GLFW_KEY_ESCAPE => Key.SSHARP,
        glfw.GLFW_KEY_KP_DIVIDE => Key.DIVISION,
        // glfw.GLFW_KEY_ESCAPE => Key.Y_DIAERESIS,
        // glfw.GLFW_KEY_ESCAPE => Key.MULTI_KEY,
        // glfw.GLFW_KEY_ESCAPE => Key.CODEINPUT,
        // glfw.GLFW_KEY_ESCAPE => Key.SINGLE_CANDIDATE,
        // glfw.GLFW_KEY_ESCAPE => Key.MULTIPLE_CANDIDATE,
        // glfw.GLFW_KEY_ESCAPE => Key.PREVIOUS_CANDIDATE,
        // glfw.GLFW_KEY_ESCAPE => Key.MODE_SWITCH,
        // glfw.GLFW_KEY_ESCAPE => Key.KANJI,
        // glfw.GLFW_KEY_ESCAPE => Key.MUHENKAN,
        // glfw.GLFW_KEY_ESCAPE => Key.HENKAN,
        // glfw.GLFW_KEY_ESCAPE => Key.ROMAJI,
        // glfw.GLFW_KEY_ESCAPE => Key.HIRAGANA,
        // glfw.GLFW_KEY_ESCAPE => Key.KATAKANA,
        // glfw.GLFW_KEY_ESCAPE => Key.HIRAGAN_KATAKANA,
        // glfw.GLFW_KEY_ESCAPE => Key.ZENKAKU,
        // glfw.GLFW_KEY_ESCAPE => Key.HANKAKU,
        // glfw.GLFW_KEY_ESCAPE => Key.ZENKAKU_HANKAKU,
        // glfw.GLFW_KEY_ESCAPE => Key.TOUROKU,
        // glfw.GLFW_KEY_ESCAPE => Key.MASSYO,
        // glfw.GLFW_KEY_ESCAPE => Key.KANA_LOCK,
        // glfw.GLFW_KEY_ESCAPE => Key.KANA_SHIFT,
        // glfw.GLFW_KEY_ESCAPE => Key.EISU_SHIFT,
        // glfw.GLFW_KEY_ESCAPE => Key.EISU_TOGGLE,
        // glfw.GLFW_KEY_ESCAPE => Key.HANGUL,
        // glfw.GLFW_KEY_ESCAPE => Key.HANGUL_START,
        // glfw.GLFW_KEY_ESCAPE => Key.HANGUL_END,
        // glfw.GLFW_KEY_ESCAPE => Key.HANGUL_HANJA,
        // glfw.GLFW_KEY_ESCAPE => Key.HANGUL_JAMO,
        // glfw.GLFW_KEY_ESCAPE => Key.HANGUL_ROMAJA,
        // glfw.GLFW_KEY_ESCAPE => Key.HANGUL_JEONJA,
        // glfw.GLFW_KEY_ESCAPE => Key.HANGUL_BANJA,
        // glfw.GLFW_KEY_ESCAPE => Key.HANGUL_PRE_HANJA,
        // glfw.GLFW_KEY_ESCAPE => Key.HANGUL_POST_HANJA,
        // glfw.GLFW_KEY_ESCAPE => Key.HANGUL_SPECIAL,
        // glfw.GLFW_KEY_ESCAPE => Key.DEAD_GRAVE,
        // glfw.GLFW_KEY_ESCAPE => Key.DEAD_ACUTE,
        // glfw.GLFW_KEY_ESCAPE => Key.DEAD_CIRCUMFLEX,
        // glfw.GLFW_KEY_ESCAPE => Key.DEAD_TILDE,
        // glfw.GLFW_KEY_ESCAPE => Key.DEAD_MACRON,
        // glfw.GLFW_KEY_ESCAPE => Key.DEAD_BREVE,
        // glfw.GLFW_KEY_ESCAPE => Key.DEAD_ABOVEDOT,
        // glfw.GLFW_KEY_ESCAPE => Key.DEAD_DIAERESIS,
        // glfw.GLFW_KEY_ESCAPE => Key.DEAD_ABOVERING,
        // glfw.GLFW_KEY_ESCAPE => Key.DEAD_DOUBLEACUTE,
        // glfw.GLFW_KEY_ESCAPE => Key.DEAD_CARON,
        // glfw.GLFW_KEY_ESCAPE => Key.DEAD_CEDILLA,
        // glfw.GLFW_KEY_ESCAPE => Key.DEAD_OGONEK,
        // glfw.GLFW_KEY_ESCAPE => Key.DEAD_IOTA,
        // glfw.GLFW_KEY_ESCAPE => Key.DEAD_VOICED_SOUND,
        // glfw.GLFW_KEY_ESCAPE => Key.DEAD_SEMIVOICED_SOUND,
        // glfw.GLFW_KEY_ESCAPE => Key.DEAD_BELOWDOT,
        // glfw.GLFW_KEY_ESCAPE => Key.DEAD_HOOK,
        // glfw.GLFW_KEY_ESCAPE => Key.DEAD_HORN,
        // glfw.GLFW_KEY_ESCAPE => Key.DEAD_STROKE,
        // glfw.GLFW_KEY_ESCAPE => Key.DEAD_ABOVECOMMA,
        // glfw.GLFW_KEY_ESCAPE => Key.DEAD_ABOVEREVERSEDCOMMA,
        // glfw.GLFW_KEY_ESCAPE => Key.DEAD_DOUBLEGRAVE,
        // glfw.GLFW_KEY_ESCAPE => Key.BACK,
        // glfw.GLFW_KEY_ESCAPE => Key.FORWARD,
        // glfw.GLFW_KEY_ESCAPE => Key.STOP,
        // glfw.GLFW_KEY_ESCAPE => Key.REFRESH,
        // glfw.GLFW_KEY_ESCAPE => Key.VOLUME_DOWN,
        // glfw.GLFW_KEY_ESCAPE => Key.VOLUME_MUTE,
        // glfw.GLFW_KEY_ESCAPE => Key.VOLUME_UP,
        // glfw.GLFW_KEY_ESCAPE => Key.BASS_BOOST,
        // glfw.GLFW_KEY_ESCAPE => Key.BASS_UP,
        // glfw.GLFW_KEY_ESCAPE => Key.BASS_DOWN,
        // glfw.GLFW_KEY_ESCAPE => Key.TREBLE_UP,
        // glfw.GLFW_KEY_ESCAPE => Key.TREBLE_DOWN,
        // glfw.GLFW_KEY_ESCAPE => Key.MEDIA_PLAY,
        // glfw.GLFW_KEY_ESCAPE => Key.MEDIA_STOP,
        // glfw.GLFW_KEY_ESCAPE => Key.MEDIA_PREVIOUS,
        // glfw.GLFW_KEY_ESCAPE => Key.MEDIA_NEXT,
        // glfw.GLFW_KEY_ESCAPE => Key.MEDIA_RECORD,
        // glfw.GLFW_KEY_ESCAPE => Key.MEDIA_PAUSE,
        // glfw.GLFW_KEY_ESCAPE => Key.MEDIA_TOGGLE_PLAY_PAUSE,
        // glfw.GLFW_KEY_ESCAPE => Key.HOME_PAGE,
        // glfw.GLFW_KEY_ESCAPE => Key.FAVORITES,
        // glfw.GLFW_KEY_ESCAPE => Key.SEARCH,
        // glfw.GLFW_KEY_ESCAPE => Key.STANDBY,
        // glfw.GLFW_KEY_ESCAPE => Key.OPEN_URL,
        // glfw.GLFW_KEY_ESCAPE => Key.MON_BRIGHTNESS_UP,
        // glfw.GLFW_KEY_ESCAPE => Key.MON_BRIGHTNESS_DOWN,
        // glfw.GLFW_KEY_ESCAPE => Key.KEYBOARD_LIGHT_ON_OFF,
        // glfw.GLFW_KEY_ESCAPE => Key.KEYBOARD_BRIGHTNESS_UP,
        // glfw.GLFW_KEY_ESCAPE => Key.KEYBOARD_BRIGHTNESS_DOWN,
        // glfw.GLFW_KEY_ESCAPE => Key.POWER_OFF,
        // glfw.GLFW_KEY_ESCAPE => Key.WAKE_UP,
        // glfw.GLFW_KEY_ESCAPE => Key.EJECT,
        // glfw.GLFW_KEY_ESCAPE => Key.SCREEN_SAVE,
        else => Key.ANY,
    };
}

pub fn convertBackendKeyModifierToKeyModifier(backendKeyModifier: c_int) KeyModifier {
    return KeyModifier{
        .shift = (backendKeyModifier & glfw.GLFW_MOD_SHIFT) != 0,
        .ctrl = (backendKeyModifier & glfw.GLFW_MOD_CONTROL) != 0,
        .alt = (backendKeyModifier & glfw.GLFW_MOD_ALT) != 0,
        .super = (backendKeyModifier & glfw.GLFW_MOD_SUPER) != 0,
        .keypad = (backendKeyModifier & glfw.GLFW_MOD_NUM_LOCK) != 0,
        .groupSwitch = (backendKeyModifier & glfw.GLFW_MOD_CAPS_LOCK) != 0,
    };
}

pub fn convertBackendKeyActionToKeyAction(backendKeyAction: c_int) KeyAction {
    return switch (backendKeyAction) {
        glfw.GLFW_PRESS => KeyAction.PRESSED,
        glfw.GLFW_RELEASE => KeyAction.RELEASED,
        glfw.GLFW_REPEAT => KeyAction.REPEAT,
        else => unreachable,
    };
}
